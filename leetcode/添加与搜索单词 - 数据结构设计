设计一个支持以下两种操作的数据结构：
void addWord(word)
bool search(word)
search(word) 可以搜索文字或正则表达式字符串，字符串只包含字母 . 或 a-z 。 . 可以表示任何一个字母。
示例:
addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
说明:
你可以假设所有单词都是由小写字母 a-z 组成的。

class WordDictionary {
    
    TrieNode root;

    /** Initialize your data structure here. */
    public WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    public void addWord(String word) {
        char[] arr = word.toCharArray();
        TrieNode t = root;
        for(int i = 0;i < arr.length;i++){
            int tmp = arr[i] - 'a';
            if(t.node[tmp] == null)
                t.node[tmp] = new TrieNode();
            t = t.node[tmp];
        }
        t.count++;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    public boolean search(String word) {
        char[] arr = word.toCharArray();
        TrieNode t = root;
        return search(arr,0,t);
    }
    
    private boolean search(char[] arr,int i,TrieNode node){
        if(i >= arr.length){
            if(node.count != 0)
                return true;
            return false;
        }
        if(arr[i] == '.'){
            for(TrieNode n : node.node){
                if(n == null)
                    continue;
                if(search(arr,i + 1,n))
                    return true;
            }
            return false;
        }else{
            int tmp = arr[i] - 'a';
            TrieNode t = node.node[tmp];
            if(t == null)
                return false;
            return search(arr,i + 1,t);
        }
    }
    
    class TrieNode{
        int count;
        TrieNode[] node = new TrieNode[26];
    }
}
