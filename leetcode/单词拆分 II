给定一个非空字符串 s 和一个包含非空单词列表的字典 wordDict，在字符串中增加空格来构建一个句子，使得句子中所有的单词都在词典中。返回所有这些可能的句子。

说明：

分隔时可以重复使用字典中的单词。
你可以假设字典中没有重复的单词。
示例 1：

输入:
s = "catsanddog"
wordDict = ["cat", "cats", "and", "sand", "dog"]
输出:
[
  "cats and dog",
  "cat sand dog"
]
示例 2：

输入:
s = "pineapplepenapple"
wordDict = ["apple", "pen", "applepen", "pine", "pineapple"]
输出:
[
  "pine apple pen apple",
  "pineapple pen apple",
  "pine applepen apple"
]
解释: 注意你可以重复使用字典中的单词。
示例 3：

输入:
s = "catsandog"
wordDict = ["cats", "dog", "sand", "and", "cat"]
输出:
[]

class Solution {
    public List<String> wordBreak(String s, List<String> wordDict) {
        List<String> list = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        boolean[] dp = new boolean[s.length() + 1];
        dp[0] = true;
        for(int i = 1;i <= s.length(); i++){
            for(int j = 0;j < i;j++){
                if(dp[j] && wordDict.contains(s.substring(j,i))){
                    dp[i] = true;
                    break;
                }
            }
        }
        if(dp[s.length()])
            findTheWord(s,wordDict,list,sb);
        return list;
    }
    
    private void findTheWord(String s, List<String> wordDict, List<String> list,StringBuilder sb){
        if("".equals(s)){
            list.add(sb.toString());
            return;
        }
        for(int i = 1;i <= s.length();i++){
            String str = s.substring(0,i);
            StringBuilder sbs = new StringBuilder();
            if(wordDict.contains(str)){
                if(i == s.length()){
                    sbs.append(sb).append(str);
                    findTheWord(s.substring(i),wordDict,list,sbs);
                }else{
                    sbs.append(sb).append(str).append(" ");
                    findTheWord(s.substring(i),wordDict,list,sbs);
                }
            }
        }
    }
}
