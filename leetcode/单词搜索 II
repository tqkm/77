给定一个二维网格 board 和一个字典中的单词列表 words，找出所有同时在二维网格和字典中出现的单词。

单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。

示例:

输入: 
words = ["oath","pea","eat","rain"] and board =
[
  ['o','a','a','n'],
  ['e','t','a','e'],
  ['i','h','k','r'],
  ['i','f','l','v']
]

输出: ["eat","oath"]

class Solution {
    
    boolean[][] b;
    TrieNode root = new TrieNode();
    public List<String> findWords(char[][] board, String[] words) {
        List<String> arr = new ArrayList<>();
        b = new boolean[board.length][board[0].length];
        TrieNode t = root;
        StringBuilder sb = new StringBuilder();
        for(String word : words)
            add(word);
        for(int i = 0;i < board.length;i++){
            for(int j = 0;j < board[0].length;j++){
                boolean[][] b = new boolean[board.length][board[0].length];
                find(board,i,j,arr,t,sb);
                sb = new StringBuilder();
            }
        }
        return arr;
    }

    private void find(char[][] arr, int i, int j, List<String> list,TrieNode t,StringBuilder s){
        char c = arr[i][j];
        StringBuilder sb = new StringBuilder(s);
        if(t.node[c - 'a'] == null)
            return;
        t = t.node[c - 'a'];
        sb.append(c);
        b[i][j] = true;
        if(t.flag){
            list.add(sb.toString());
            t.flag = false;
        }
        if(isBound(arr,i - 1,j) && t.node[arr[i - 1][j] - 'a'] != null && !b[i - 1][j])
            find(arr,i - 1,j,list,t,sb);
        if(isBound(arr,i + 1,j) && t.node[arr[i + 1][j] - 'a'] != null && !b[i + 1][j])
            find(arr,i + 1,j,list,t,sb);
        if(isBound(arr,i,j - 1) && t.node[arr[i][j - 1] - 'a'] != null && !b[i][j - 1])
            find(arr,i ,j - 1,list,t,sb);
        if(isBound(arr,i,j + 1) && t.node[arr[i][j + 1] - 'a'] != null && !b[i][j + 1])
            find(arr,i,j + 1,list,t,sb);
        b[i][j] =false;
    }

    private boolean isBound(char[][] arr,int x,int y){
        int i = arr.length;
        int j = arr[0].length;
        return x >= 0 && x < i && y >= 0 && y < j;
    }

    private void add(String word){
        TrieNode t = root;
        char[] arr = word.toCharArray();
        for(int i = 0;i < arr.length;i++){
            int tmp = arr[i] - 'a';
            if(t.node[tmp] == null){
                t.node[tmp] = new TrieNode();
            }
            t = t.node[tmp];
            t.c = arr[i];
        }
        t.flag = true;
    }

    class TrieNode{
        char c;
        TrieNode[] node = new TrieNode[26];
        boolean flag;
    }
    
}
