实现一个 MapSum 类里的两个方法，insert 和 sum。

对于方法 insert，你将得到一对（字符串，整数）的键值对。字符串表示键，整数表示值。如果键已经存在，那么原来的键值对将被替代成新的键值对。

对于方法 sum，你将得到一个表示前缀的字符串，你需要返回所有以该前缀开头的键的值的总和。

示例 1:

输入: insert("apple", 3), 输出: Null
输入: sum("ap"), 输出: 3
输入: insert("app", 2), 输出: Null
输入: sum("ap"), 输出: 5

class MapSum {
    
    TrieNode<Integer> root;
    
    class TrieNode<K>{
        K k;
        int count;
        HashMap<Character,TrieNode<K>> map = new HashMap<>();
    }
    
    /** Initialize your data structure here. */
    public MapSum() {
        root = new TrieNode<>();
    }
    
    public void insert(String key, int val) {
        char[] arr = key.toCharArray();
        TrieNode<Integer> t = root;
        for(int i = 0;i < arr.length;i++){
            if(t.map.get(arr[i]) == null)
                t.map.put(arr[i],new TrieNode<Integer>());
            t = t.map.get(arr[i]);
        }
        t.count++;
        t.k = val;
    }
    
    public int sum(String prefix) {
        char[] arr = prefix.toCharArray();
        TrieNode<Integer> t = root;
        for(int i = 0;i < arr.length;i++){
            if(t.map.get(arr[i]) == null)
                return 0;
            t = t.map.get(arr[i]);
        }
        int sum = sum(t);
        return sum;
    }
    
    private int sum(TrieNode<Integer> t){
        int tmp = 0;
        if(t == null)
            return 0;
        if(t.count != 0)
            tmp += t.k;
        for(Character c : t.map.keySet()){
            TrieNode<Integer> te = t.map.get(c);
            tmp += sum(te);
        }
        return tmp;
    }
}
