给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。
示例: 

输入: s = 7, nums = [2,3,1,2,4,3]
输出: 2
解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。

计算每个符合条件的数组的长度，从其中选出最小的那个；定义两个下标，当数组和小于目标时，向右移动p2，当数组和大于目标时，向右移动p2，重新计算和，每次都判断
数组和是否满足条件，若满足，则判断此时数组大小是否比上次小，小则替换

class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        int p1 = 0;
        int p2 = 0;
        int sum = 0;
        int min = nums.length + 1;
        while(p1 < nums.length){
            if(p2 < nums.length && sum < s){
                sum += nums[p2++];              
            }else{
                sum -= nums[p1++];
            }
            if(sum >= s)
                min = min < p2 - p1 ? min : p2 - p1;
        }
        return min == nums.length + 1 ? 0 : min;
    }
}
