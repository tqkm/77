给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。

请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。

你可以假设 nums1 和 nums2 不会同时为空。

示例 1:

nums1 = [1, 3]
nums2 = [2]

则中位数是 2.0
示例 2:

nums1 = [1, 2]
nums2 = [3, 4]

则中位数是 (2 + 3)/2 = 2.5

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        if(m > n){
            int[] tmp = nums1;
            nums1 = nums2;
            nums2 = tmp;
            int temp = m;
            m = n;
            n = temp;
        }
        int l1 = 0,l2 = nums1.length,halfLenth = (m + n + 1) / 2;
        while(l1 <= l2){
            int i = (l1 + l2) / 2;
            int j = halfLenth - i;
            if(i > 0 && nums2[j] < nums1[i - 1]){
                l2 = i - 1;
            }else if(i < m && nums1[i] < nums2[j - 1]){
                l1 = i + 1;
            }else{
                int maxLeft = 0;
                if(i == 0)
                    maxLeft = nums2[j - 1];
                else if(j == 0)
                    maxLeft = nums1[i - 1];
                else
                    maxLeft = Math.max(nums1[i - 1],nums2[j - 1]);
                if((m + n) % 2 == 1)
                    return maxLeft;
                int maxRight = 0;
                if(i == m)
                    maxRight = nums2[j];
                else if(j == n)
                    maxRight = nums1[i];
                else
                    maxRight = Math.min(nums1[i],nums2[j]);
                return (maxLeft + maxRight) / 2.0;
            }
        }
        return 0;
    }
}
