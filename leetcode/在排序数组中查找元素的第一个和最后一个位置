给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。

你的算法时间复杂度必须是 O(log n) 级别。

如果数组中不存在目标值，返回 [-1, -1]。

示例 1:

输入: nums = [5,7,7,8,8,10], target = 8
输出: [3,4]
示例 2:

输入: nums = [5,7,7,8,8,10], target = 6
输出: [-1,-1]
class Solution {
    public int[] searchRange(int[] nums, int target) {
        int s = 0,e = nums.length - 1;
        int[] arr = {-1,-1};
        if(nums.length == 0 || nums == null)
            return arr;
        arr[0] = left(s,e,nums,arr,target);
        if(arr[1] != -1)
            return arr;
        arr[1] = right(s,e,nums,arr,target);
        return arr;
    }
    
    public int left(int s,int e,int[] nums,int[] arr,int target){
        while(s < e){
            int mid = (s + e) >> 1;
            if(nums[mid] == target && (mid == 0 || nums[mid - 1] != target)){
                if(mid + 1 == nums.length || nums[mid + 1] != target)
                    return arr[0] = arr[1] = mid;
                return mid;
            }else if(nums[mid] >= target){
                e = mid;
            }else{
                s = mid + 1;
            }
        }
        if(nums[s] == target)
            return s;
        return -1;
    }
    
    public int right(int s,int e,int[] nums,int[] arr,int target){
        while(s < e){
            int mid = (s + e) >> 1;
            if(nums[mid] == target && (mid + 1 == nums.length || nums[mid + 1] != target)){
                return mid;
            }else if(nums[mid] > target){
                e = mid;
            }else {
                s = mid + 1;
            }
        }
        if(nums[s] == target)
            return s;
        return -1;
    }
    
}
