给定一个整数 n，生成所有由 1 ... n 为节点所组成的二叉搜索树。

示例:

输入: 3
输出:
[
  [1,null,3,2],
  [3,2,null,1],
  [3,1,null,null,2],
  [2,1,3],
  [1,null,2,null,3]
]
解释:
以上的输出对应以下 5 种不同结构的二叉搜索树：

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
   
class Solution {
    public List<TreeNode> generateTrees(int n) {
        if(n == 0)
            return new LinkedList<TreeNode>();
        return generate(1,n);
    }
    
    private List<TreeNode> generate(int start, int end){
        LinkedList<TreeNode> ll = new LinkedList<>();
        if(start > end){
            ll.add(null);
            return ll;
        }
        for(int i = start;i <= end; i++){
            List<TreeNode> left = generate(start,i - 1);
            List<TreeNode> right = generate(i + 1,end);
            for(TreeNode l : left){
                for(TreeNode r : right){
                    TreeNode t = new TreeNode(i);
                    t.left = l;
                    t.right = r;
                    ll.add(t);
                }
            }
        }
        return ll;    
    }
}
