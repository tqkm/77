/**
有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。
在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。
最初，除 0 号房间外的其余所有房间都被锁住。
你可以自由地在房间之间来回走动。
如果能进入每个房间返回 true，否则返回 false。
输入: [[1],[2],[3],[]]
输出: true
输入：[[1,3],[3,0,1],[2],[0]]
输出：false
*/

class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Set<Integer> set = new HashSet<>();
        Stack<List<Integer>> stack = new Stack<>();
        stack.push(rooms.get(0));
        set.add(0);
        while (!stack.isEmpty()){
            List<Integer> pop = stack.pop();
            for(Integer i : pop){
                if (!set.contains(i)){
                    set.add(i);
                    stack.push(rooms.get(i));
                }
            }
        }
        return set.size() == rooms.size();
    }
}
