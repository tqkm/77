在一个给定的数组nums中，总是存在一个最大元素 。
查找数组中的最大元素是否至少是数组中每个其他数字的两倍。
如果是，则返回最大元素的索引，否则返回-1。
输入: nums = [3, 6, 1, 0]
输出: 1
解释: 6是最大的整数, 对于数组中的其他整数,
6大于数组中其他元素的两倍。6的索引是1, 所以我们返回1.
问题的关键在于找出数组中最大的数和第二大的数;方法是定义两个指针，分别指向这两类数，当最大数改变时，最大数指向数组当前数值，第二大数赋值为原来的最大数，但这样
会引发一个问题，当最大数找到后，第二大数不准确，如[3,4,10,5,7],当找到10之后，第二大数应该接着寻找，方法也很简单，只要比较当前的数是否小于最大数并且大于第二
大数即可；

class Solution {
    public int dominantIndex(int[] nums) {
        int size;
        if((size = nums.length) == 1)
            return 0;
        int max = 0;
        int umax = 0;
        int index = -1;
        for(int i = 0; i < size;i++){
            if(nums[i] > max){
                umax = max;
                max = nums[i];
                index = i;
            } 
            if(nums[i] > umax && nums[i] < max)
                umax = nums[i];
        }
        if(max >= umax << 1)
            return index;
        return -1;
    }
}
