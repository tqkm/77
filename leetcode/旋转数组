给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。

示例 1:

输入: [1,2,3,4,5,6,7] 和 k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右旋转 1 步: [7,1,2,3,4,5,6]
向右旋转 2 步: [6,7,1,2,3,4,5]
向右旋转 3 步: [5,6,7,1,2,3,4]


最直接的做法是对k取余，计算实际要旋转的次数，然后依次旋转，不过这种模式时间复杂度不确定外，操作数组次数也不确定

反转三次数组，首先全部反转，再反转0到k-1的数组，再反转k到length-1的数组

class Solution {
    public void rotate(int[] nums, int k) {
        int length = nums.length;
        if(length == 0)
            return;
        k = k % length;
        reverse(0,length - 1,nums);
        reverse(0,k - 1,nums);
        reverse(k,length - 1,nums);
    }
    
    public void reverse(int start,int end,int[] nums){
        while(start < end){
            int tmp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = tmp;
        }
    }
}
