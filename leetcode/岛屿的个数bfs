import java.util.LinkedList;
import java.util.Queue;

/**
 * 给定一个由 '1'（陆地）和 '0'（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻
 * 的陆地连接而成的。你可以假设网格的四个边均被水包围。
 *
 * 输入:
 * 11000
 * 11000
 * 00100
 * 00011
 *
 * 输出: 3
 */
public class BFS {
    public static void main(String[] args) {
        char[][] c = {{'1','0','0','0','0'},{'0','1','0','0','0'},{'0','0','1','0','0'},{'0','0','0','1','0'}};
        BFS b = new BFS();
        System.out.println(b.numIslands(c));
    }
    
    public int numIslands(char[][] grid){
        if(grid == null || grid.length == 0 || grid[0].length == 0){
            return 0;
        }
        int row = grid.length;
        int column = grid[0].length;
        int num = 0;
        for(int i = 0;i<row;i++){
            for(int j = 0;j<column;j++){
                if (grid[i][j] == '1'){
                    BFS(grid,i,j);
                    num++;
                }
            }
        }
        return num;
    }

    public void BFS(char[][] grid,int x,int y){
        //BFS 根节点入队，标记来过，出队，如果尚未入队，则根节点附近的节点入队（确保不出界）
        Queue<Coordinate> q = new LinkedList<>();
        Coordinate c = new Coordinate(x,y);
        q.offer(c);
        grid[x][y] = '0';
        while(!q.isEmpty()){
            Coordinate poll = q.poll();
            if (isInBound(poll.x+1,poll.y,grid)){
                if(grid[poll.x+1][poll.y] == '1'){
                    grid[poll.x+1][poll.y] = '0';;
                    q.offer(new Coordinate(poll.x+1,poll.y));
                }
            }
            if (isInBound(poll.x,poll.y+1,grid)){
                if(grid[poll.x][poll.y+1] == '1'){
                    grid[poll.x][poll.y+1] = '0';
                    q.offer(new Coordinate(poll.x,poll.y+1));
                }
            }
            if (isInBound(poll.x-1,poll.y,grid)){
                if(grid[poll.x-1][poll.y] == '1'){
                    grid[poll.x-1][poll.y] = '0';
                    q.offer(new Coordinate(poll.x-1,poll.y));
                }
            }
            if (isInBound(poll.x,poll.y-1,grid)){
                if(grid[poll.x][poll.y-1] == '1'){
                    grid[poll.x][poll.y-1] = '0';
                    q.offer(new Coordinate(poll.x,poll.y-1));
                }
            }
        }
    }
    //界限判断
    public boolean isInBound(int x,int y,char[][] grid){
        int row = grid.length;
        int column = grid[0].length;
        return x >= 0 && x < row && y >= 0 && y < column;
    }

    public static class Coordinate{
        int x;
        int y;
        public Coordinate(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }
}
