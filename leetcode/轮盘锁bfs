import java.util.*;

/**
 * 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。
 * 锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。
 * 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
 * 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
 *
 * 问题可看成图的搜索，从0000向四周扩散搜索，利用广度优先算法，对周围8种状态的字符串进行比较，若遇到死亡数字则停止，若没有
 * 遇到则继续搜索，知道找到target，所走的路径为最短路径
 * /
public class BFS {
    public static void main(String[] args) {
        BFS b = new BFS();
        System.out.println(b.openLock(new String[]{"0001","0101","0102","1212","2002"},"0202"));
    }

    public int openLock(String[] deadends, String target) {
        Set<String> dead = new HashSet<>(Arrays.asList(deadends));
        Set<String> visited = new HashSet<>();
        if (dead.contains("0000"))
            return -1;
        String init = "0000";
        int step = 0;
        Queue<String> q1 = new LinkedList<>();
        Queue<String> q2 = new LinkedList<>();
        q1.offer(init);
        while(!q1.isEmpty()){
            String poll = q1.poll();
            if (poll.equals(target)){
                return step;
            }
            List<String> l = getAround(poll);
            for (String next: l) {
                if(!dead.contains(next) && !visited.contains(next)){
                    visited.add(next);
                    q2.offer(next);
                }
            }
            //利用两个queue进行step的控制，q1保存和上一节点有相同距离的节点，q1全部循环结束，再进行下一轮
            if (q1.isEmpty()){
                q1 = q2;
                q2 = new LinkedList<>();
                step++;
            }
        }
        return -1;
    }

    public List<String> getAround(String poll) {
        List<String> l = new LinkedList<>();
        for(int i = 0;i < 4;i++){
            char c = poll.charAt(i);
            char cc = c == '0' ? '9' : (char)(c - 1);
            StringBuilder s = new StringBuilder(poll);
            s.setCharAt(i,cc);
            l.add(s.toString());
            cc = c == '9' ? '0' :(char)(c + 1);
            s = new StringBuilder(poll);
            s.setCharAt(i,cc);
            l.add(s.toString());
        }
        return l;
    }
}
