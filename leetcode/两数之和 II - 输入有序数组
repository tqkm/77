给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。
函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。
说明:
返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。

示例:
输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。

题中已说明数组已按升序排好序，因此可以从数组的头p1和尾p2展开，若和大于目标数，则p1加一，若和小于目标数，p2减一左移，若等于目标数，返回下标

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int p1 = 0;
        int p2 = numbers.length - 1;
        int sum = numbers[p1] + numbers[p2];
        int[] arr = new int[2];
        while(p1 < p2){
            if(sum == target){
                arr[0] = ++p1;
                arr[1] = ++p2;
                break;
            }else if(sum < target){
                sum = numbers[++p1] + numbers[p2];
            }else{
                sum = numbers[p1] + numbers[--p2];
            }
        }
        return arr;
    }
}
